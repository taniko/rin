// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: taniko/rin/message/v1/message.proto

package messagev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/taniko/rin/internal/gen/taniko/rin/message/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// MessageServiceName is the fully-qualified name of the MessageService service.
	MessageServiceName = "taniko.rin.message.v1.MessageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MessageServiceCreateMessageProcedure is the fully-qualified name of the MessageService's
	// CreateMessage RPC.
	MessageServiceCreateMessageProcedure = "/taniko.rin.message.v1.MessageService/CreateMessage"
	// MessageServiceDeleteMessageProcedure is the fully-qualified name of the MessageService's
	// DeleteMessage RPC.
	MessageServiceDeleteMessageProcedure = "/taniko.rin.message.v1.MessageService/DeleteMessage"
)

// MessageServiceClient is a client for the taniko.rin.message.v1.MessageService service.
type MessageServiceClient interface {
	CreateMessage(context.Context, *connect_go.Request[v1.CreateMessageRequest]) (*connect_go.Response[v1.CreateMessageResponse], error)
	DeleteMessage(context.Context, *connect_go.Request[v1.DeleteMessageRequest]) (*connect_go.Response[v1.DeleteMessageResponse], error)
}

// NewMessageServiceClient constructs a client for the taniko.rin.message.v1.MessageService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMessageServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MessageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &messageServiceClient{
		createMessage: connect_go.NewClient[v1.CreateMessageRequest, v1.CreateMessageResponse](
			httpClient,
			baseURL+MessageServiceCreateMessageProcedure,
			opts...,
		),
		deleteMessage: connect_go.NewClient[v1.DeleteMessageRequest, v1.DeleteMessageResponse](
			httpClient,
			baseURL+MessageServiceDeleteMessageProcedure,
			opts...,
		),
	}
}

// messageServiceClient implements MessageServiceClient.
type messageServiceClient struct {
	createMessage *connect_go.Client[v1.CreateMessageRequest, v1.CreateMessageResponse]
	deleteMessage *connect_go.Client[v1.DeleteMessageRequest, v1.DeleteMessageResponse]
}

// CreateMessage calls taniko.rin.message.v1.MessageService.CreateMessage.
func (c *messageServiceClient) CreateMessage(ctx context.Context, req *connect_go.Request[v1.CreateMessageRequest]) (*connect_go.Response[v1.CreateMessageResponse], error) {
	return c.createMessage.CallUnary(ctx, req)
}

// DeleteMessage calls taniko.rin.message.v1.MessageService.DeleteMessage.
func (c *messageServiceClient) DeleteMessage(ctx context.Context, req *connect_go.Request[v1.DeleteMessageRequest]) (*connect_go.Response[v1.DeleteMessageResponse], error) {
	return c.deleteMessage.CallUnary(ctx, req)
}

// MessageServiceHandler is an implementation of the taniko.rin.message.v1.MessageService service.
type MessageServiceHandler interface {
	CreateMessage(context.Context, *connect_go.Request[v1.CreateMessageRequest]) (*connect_go.Response[v1.CreateMessageResponse], error)
	DeleteMessage(context.Context, *connect_go.Request[v1.DeleteMessageRequest]) (*connect_go.Response[v1.DeleteMessageResponse], error)
}

// NewMessageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMessageServiceHandler(svc MessageServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(MessageServiceCreateMessageProcedure, connect_go.NewUnaryHandler(
		MessageServiceCreateMessageProcedure,
		svc.CreateMessage,
		opts...,
	))
	mux.Handle(MessageServiceDeleteMessageProcedure, connect_go.NewUnaryHandler(
		MessageServiceDeleteMessageProcedure,
		svc.DeleteMessage,
		opts...,
	))
	return "/taniko.rin.message.v1.MessageService/", mux
}

// UnimplementedMessageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMessageServiceHandler struct{}

func (UnimplementedMessageServiceHandler) CreateMessage(context.Context, *connect_go.Request[v1.CreateMessageRequest]) (*connect_go.Response[v1.CreateMessageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("taniko.rin.message.v1.MessageService.CreateMessage is not implemented"))
}

func (UnimplementedMessageServiceHandler) DeleteMessage(context.Context, *connect_go.Request[v1.DeleteMessageRequest]) (*connect_go.Response[v1.DeleteMessageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("taniko.rin.message.v1.MessageService.DeleteMessage is not implemented"))
}
