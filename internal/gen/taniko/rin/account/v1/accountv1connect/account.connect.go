// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: taniko/rin/account/v1/account.proto

package accountv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/taniko/rin/internal/gen/taniko/rin/account/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AccountServiceName is the fully-qualified name of the AccountService service.
	AccountServiceName = "taniko.rin.account.v1.AccountService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AccountServiceCreateAccountProcedure is the fully-qualified name of the AccountService's
	// CreateAccount RPC.
	AccountServiceCreateAccountProcedure = "/taniko.rin.account.v1.AccountService/CreateAccount"
	// AccountServiceUpdateAccountProcedure is the fully-qualified name of the AccountService's
	// UpdateAccount RPC.
	AccountServiceUpdateAccountProcedure = "/taniko.rin.account.v1.AccountService/UpdateAccount"
	// AccountServiceLoginProcedure is the fully-qualified name of the AccountService's Login RPC.
	AccountServiceLoginProcedure = "/taniko.rin.account.v1.AccountService/Login"
	// AccountServiceVerifyTokenProcedure is the fully-qualified name of the AccountService's
	// VerifyToken RPC.
	AccountServiceVerifyTokenProcedure = "/taniko.rin.account.v1.AccountService/VerifyToken"
)

// AccountServiceClient is a client for the taniko.rin.account.v1.AccountService service.
type AccountServiceClient interface {
	CreateAccount(context.Context, *connect_go.Request[v1.CreateAccountRequest]) (*connect_go.Response[v1.CreateAccountResponse], error)
	UpdateAccount(context.Context, *connect_go.Request[v1.UpdateAccountRequest]) (*connect_go.Response[v1.UpdateAccountResponse], error)
	Login(context.Context, *connect_go.Request[v1.LoginRequest]) (*connect_go.Response[v1.LoginResponse], error)
	VerifyToken(context.Context, *connect_go.Request[v1.VerifyTokenRequest]) (*connect_go.Response[v1.VerifyTokenResponse], error)
}

// NewAccountServiceClient constructs a client for the taniko.rin.account.v1.AccountService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccountServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AccountServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &accountServiceClient{
		createAccount: connect_go.NewClient[v1.CreateAccountRequest, v1.CreateAccountResponse](
			httpClient,
			baseURL+AccountServiceCreateAccountProcedure,
			opts...,
		),
		updateAccount: connect_go.NewClient[v1.UpdateAccountRequest, v1.UpdateAccountResponse](
			httpClient,
			baseURL+AccountServiceUpdateAccountProcedure,
			opts...,
		),
		login: connect_go.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+AccountServiceLoginProcedure,
			opts...,
		),
		verifyToken: connect_go.NewClient[v1.VerifyTokenRequest, v1.VerifyTokenResponse](
			httpClient,
			baseURL+AccountServiceVerifyTokenProcedure,
			opts...,
		),
	}
}

// accountServiceClient implements AccountServiceClient.
type accountServiceClient struct {
	createAccount *connect_go.Client[v1.CreateAccountRequest, v1.CreateAccountResponse]
	updateAccount *connect_go.Client[v1.UpdateAccountRequest, v1.UpdateAccountResponse]
	login         *connect_go.Client[v1.LoginRequest, v1.LoginResponse]
	verifyToken   *connect_go.Client[v1.VerifyTokenRequest, v1.VerifyTokenResponse]
}

// CreateAccount calls taniko.rin.account.v1.AccountService.CreateAccount.
func (c *accountServiceClient) CreateAccount(ctx context.Context, req *connect_go.Request[v1.CreateAccountRequest]) (*connect_go.Response[v1.CreateAccountResponse], error) {
	return c.createAccount.CallUnary(ctx, req)
}

// UpdateAccount calls taniko.rin.account.v1.AccountService.UpdateAccount.
func (c *accountServiceClient) UpdateAccount(ctx context.Context, req *connect_go.Request[v1.UpdateAccountRequest]) (*connect_go.Response[v1.UpdateAccountResponse], error) {
	return c.updateAccount.CallUnary(ctx, req)
}

// Login calls taniko.rin.account.v1.AccountService.Login.
func (c *accountServiceClient) Login(ctx context.Context, req *connect_go.Request[v1.LoginRequest]) (*connect_go.Response[v1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// VerifyToken calls taniko.rin.account.v1.AccountService.VerifyToken.
func (c *accountServiceClient) VerifyToken(ctx context.Context, req *connect_go.Request[v1.VerifyTokenRequest]) (*connect_go.Response[v1.VerifyTokenResponse], error) {
	return c.verifyToken.CallUnary(ctx, req)
}

// AccountServiceHandler is an implementation of the taniko.rin.account.v1.AccountService service.
type AccountServiceHandler interface {
	CreateAccount(context.Context, *connect_go.Request[v1.CreateAccountRequest]) (*connect_go.Response[v1.CreateAccountResponse], error)
	UpdateAccount(context.Context, *connect_go.Request[v1.UpdateAccountRequest]) (*connect_go.Response[v1.UpdateAccountResponse], error)
	Login(context.Context, *connect_go.Request[v1.LoginRequest]) (*connect_go.Response[v1.LoginResponse], error)
	VerifyToken(context.Context, *connect_go.Request[v1.VerifyTokenRequest]) (*connect_go.Response[v1.VerifyTokenResponse], error)
}

// NewAccountServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccountServiceHandler(svc AccountServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(AccountServiceCreateAccountProcedure, connect_go.NewUnaryHandler(
		AccountServiceCreateAccountProcedure,
		svc.CreateAccount,
		opts...,
	))
	mux.Handle(AccountServiceUpdateAccountProcedure, connect_go.NewUnaryHandler(
		AccountServiceUpdateAccountProcedure,
		svc.UpdateAccount,
		opts...,
	))
	mux.Handle(AccountServiceLoginProcedure, connect_go.NewUnaryHandler(
		AccountServiceLoginProcedure,
		svc.Login,
		opts...,
	))
	mux.Handle(AccountServiceVerifyTokenProcedure, connect_go.NewUnaryHandler(
		AccountServiceVerifyTokenProcedure,
		svc.VerifyToken,
		opts...,
	))
	return "/taniko.rin.account.v1.AccountService/", mux
}

// UnimplementedAccountServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccountServiceHandler struct{}

func (UnimplementedAccountServiceHandler) CreateAccount(context.Context, *connect_go.Request[v1.CreateAccountRequest]) (*connect_go.Response[v1.CreateAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("taniko.rin.account.v1.AccountService.CreateAccount is not implemented"))
}

func (UnimplementedAccountServiceHandler) UpdateAccount(context.Context, *connect_go.Request[v1.UpdateAccountRequest]) (*connect_go.Response[v1.UpdateAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("taniko.rin.account.v1.AccountService.UpdateAccount is not implemented"))
}

func (UnimplementedAccountServiceHandler) Login(context.Context, *connect_go.Request[v1.LoginRequest]) (*connect_go.Response[v1.LoginResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("taniko.rin.account.v1.AccountService.Login is not implemented"))
}

func (UnimplementedAccountServiceHandler) VerifyToken(context.Context, *connect_go.Request[v1.VerifyTokenRequest]) (*connect_go.Response[v1.VerifyTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("taniko.rin.account.v1.AccountService.VerifyToken is not implemented"))
}
