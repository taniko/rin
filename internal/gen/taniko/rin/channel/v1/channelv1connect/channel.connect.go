// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: taniko/rin/channel/v1/channel.proto

package channelv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/taniko/rin/internal/gen/taniko/rin/channel/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ChannelServiceName is the fully-qualified name of the ChannelService service.
	ChannelServiceName = "taniko.rin.channel.v1.ChannelService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ChannelServiceCreateChannelProcedure is the fully-qualified name of the ChannelService's
	// CreateChannel RPC.
	ChannelServiceCreateChannelProcedure = "/taniko.rin.channel.v1.ChannelService/CreateChannel"
	// ChannelServiceUpdateChannelProcedure is the fully-qualified name of the ChannelService's
	// UpdateChannel RPC.
	ChannelServiceUpdateChannelProcedure = "/taniko.rin.channel.v1.ChannelService/UpdateChannel"
	// ChannelServiceArchiveChannelProcedure is the fully-qualified name of the ChannelService's
	// ArchiveChannel RPC.
	ChannelServiceArchiveChannelProcedure = "/taniko.rin.channel.v1.ChannelService/ArchiveChannel"
	// ChannelServiceDeleteChannelProcedure is the fully-qualified name of the ChannelService's
	// DeleteChannel RPC.
	ChannelServiceDeleteChannelProcedure = "/taniko.rin.channel.v1.ChannelService/DeleteChannel"
	// ChannelServiceListUsersProcedure is the fully-qualified name of the ChannelService's ListUsers
	// RPC.
	ChannelServiceListUsersProcedure = "/taniko.rin.channel.v1.ChannelService/ListUsers"
	// ChannelServiceGetUserRoleProcedure is the fully-qualified name of the ChannelService's
	// GetUserRole RPC.
	ChannelServiceGetUserRoleProcedure = "/taniko.rin.channel.v1.ChannelService/GetUserRole"
	// ChannelServiceListRoleUsersProcedure is the fully-qualified name of the ChannelService's
	// ListRoleUsers RPC.
	ChannelServiceListRoleUsersProcedure = "/taniko.rin.channel.v1.ChannelService/ListRoleUsers"
)

// ChannelServiceClient is a client for the taniko.rin.channel.v1.ChannelService service.
type ChannelServiceClient interface {
	CreateChannel(context.Context, *connect_go.Request[v1.CreateChannelRequest]) (*connect_go.Response[v1.CreateChannelResponse], error)
	UpdateChannel(context.Context, *connect_go.Request[v1.UpdateChannelRequest]) (*connect_go.Response[v1.UpdateChannelResponse], error)
	ArchiveChannel(context.Context, *connect_go.Request[v1.ArchiveChannelRequest]) (*connect_go.Response[v1.ArchiveChannelResponse], error)
	DeleteChannel(context.Context, *connect_go.Request[v1.DeleteChannelRequest]) (*connect_go.Response[v1.DeleteChannelResponse], error)
	ListUsers(context.Context, *connect_go.Request[v1.ListUsersRequest]) (*connect_go.Response[v1.ListUsersResponse], error)
	GetUserRole(context.Context, *connect_go.Request[v1.GetUserRoleRequest]) (*connect_go.Response[v1.GetUserRoleResponse], error)
	ListRoleUsers(context.Context, *connect_go.Request[v1.ListRoleUsersRequest]) (*connect_go.Response[v1.ListRoleUsersResponse], error)
}

// NewChannelServiceClient constructs a client for the taniko.rin.channel.v1.ChannelService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChannelServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ChannelServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &channelServiceClient{
		createChannel: connect_go.NewClient[v1.CreateChannelRequest, v1.CreateChannelResponse](
			httpClient,
			baseURL+ChannelServiceCreateChannelProcedure,
			opts...,
		),
		updateChannel: connect_go.NewClient[v1.UpdateChannelRequest, v1.UpdateChannelResponse](
			httpClient,
			baseURL+ChannelServiceUpdateChannelProcedure,
			opts...,
		),
		archiveChannel: connect_go.NewClient[v1.ArchiveChannelRequest, v1.ArchiveChannelResponse](
			httpClient,
			baseURL+ChannelServiceArchiveChannelProcedure,
			opts...,
		),
		deleteChannel: connect_go.NewClient[v1.DeleteChannelRequest, v1.DeleteChannelResponse](
			httpClient,
			baseURL+ChannelServiceDeleteChannelProcedure,
			opts...,
		),
		listUsers: connect_go.NewClient[v1.ListUsersRequest, v1.ListUsersResponse](
			httpClient,
			baseURL+ChannelServiceListUsersProcedure,
			opts...,
		),
		getUserRole: connect_go.NewClient[v1.GetUserRoleRequest, v1.GetUserRoleResponse](
			httpClient,
			baseURL+ChannelServiceGetUserRoleProcedure,
			opts...,
		),
		listRoleUsers: connect_go.NewClient[v1.ListRoleUsersRequest, v1.ListRoleUsersResponse](
			httpClient,
			baseURL+ChannelServiceListRoleUsersProcedure,
			opts...,
		),
	}
}

// channelServiceClient implements ChannelServiceClient.
type channelServiceClient struct {
	createChannel  *connect_go.Client[v1.CreateChannelRequest, v1.CreateChannelResponse]
	updateChannel  *connect_go.Client[v1.UpdateChannelRequest, v1.UpdateChannelResponse]
	archiveChannel *connect_go.Client[v1.ArchiveChannelRequest, v1.ArchiveChannelResponse]
	deleteChannel  *connect_go.Client[v1.DeleteChannelRequest, v1.DeleteChannelResponse]
	listUsers      *connect_go.Client[v1.ListUsersRequest, v1.ListUsersResponse]
	getUserRole    *connect_go.Client[v1.GetUserRoleRequest, v1.GetUserRoleResponse]
	listRoleUsers  *connect_go.Client[v1.ListRoleUsersRequest, v1.ListRoleUsersResponse]
}

// CreateChannel calls taniko.rin.channel.v1.ChannelService.CreateChannel.
func (c *channelServiceClient) CreateChannel(ctx context.Context, req *connect_go.Request[v1.CreateChannelRequest]) (*connect_go.Response[v1.CreateChannelResponse], error) {
	return c.createChannel.CallUnary(ctx, req)
}

// UpdateChannel calls taniko.rin.channel.v1.ChannelService.UpdateChannel.
func (c *channelServiceClient) UpdateChannel(ctx context.Context, req *connect_go.Request[v1.UpdateChannelRequest]) (*connect_go.Response[v1.UpdateChannelResponse], error) {
	return c.updateChannel.CallUnary(ctx, req)
}

// ArchiveChannel calls taniko.rin.channel.v1.ChannelService.ArchiveChannel.
func (c *channelServiceClient) ArchiveChannel(ctx context.Context, req *connect_go.Request[v1.ArchiveChannelRequest]) (*connect_go.Response[v1.ArchiveChannelResponse], error) {
	return c.archiveChannel.CallUnary(ctx, req)
}

// DeleteChannel calls taniko.rin.channel.v1.ChannelService.DeleteChannel.
func (c *channelServiceClient) DeleteChannel(ctx context.Context, req *connect_go.Request[v1.DeleteChannelRequest]) (*connect_go.Response[v1.DeleteChannelResponse], error) {
	return c.deleteChannel.CallUnary(ctx, req)
}

// ListUsers calls taniko.rin.channel.v1.ChannelService.ListUsers.
func (c *channelServiceClient) ListUsers(ctx context.Context, req *connect_go.Request[v1.ListUsersRequest]) (*connect_go.Response[v1.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// GetUserRole calls taniko.rin.channel.v1.ChannelService.GetUserRole.
func (c *channelServiceClient) GetUserRole(ctx context.Context, req *connect_go.Request[v1.GetUserRoleRequest]) (*connect_go.Response[v1.GetUserRoleResponse], error) {
	return c.getUserRole.CallUnary(ctx, req)
}

// ListRoleUsers calls taniko.rin.channel.v1.ChannelService.ListRoleUsers.
func (c *channelServiceClient) ListRoleUsers(ctx context.Context, req *connect_go.Request[v1.ListRoleUsersRequest]) (*connect_go.Response[v1.ListRoleUsersResponse], error) {
	return c.listRoleUsers.CallUnary(ctx, req)
}

// ChannelServiceHandler is an implementation of the taniko.rin.channel.v1.ChannelService service.
type ChannelServiceHandler interface {
	CreateChannel(context.Context, *connect_go.Request[v1.CreateChannelRequest]) (*connect_go.Response[v1.CreateChannelResponse], error)
	UpdateChannel(context.Context, *connect_go.Request[v1.UpdateChannelRequest]) (*connect_go.Response[v1.UpdateChannelResponse], error)
	ArchiveChannel(context.Context, *connect_go.Request[v1.ArchiveChannelRequest]) (*connect_go.Response[v1.ArchiveChannelResponse], error)
	DeleteChannel(context.Context, *connect_go.Request[v1.DeleteChannelRequest]) (*connect_go.Response[v1.DeleteChannelResponse], error)
	ListUsers(context.Context, *connect_go.Request[v1.ListUsersRequest]) (*connect_go.Response[v1.ListUsersResponse], error)
	GetUserRole(context.Context, *connect_go.Request[v1.GetUserRoleRequest]) (*connect_go.Response[v1.GetUserRoleResponse], error)
	ListRoleUsers(context.Context, *connect_go.Request[v1.ListRoleUsersRequest]) (*connect_go.Response[v1.ListRoleUsersResponse], error)
}

// NewChannelServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChannelServiceHandler(svc ChannelServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(ChannelServiceCreateChannelProcedure, connect_go.NewUnaryHandler(
		ChannelServiceCreateChannelProcedure,
		svc.CreateChannel,
		opts...,
	))
	mux.Handle(ChannelServiceUpdateChannelProcedure, connect_go.NewUnaryHandler(
		ChannelServiceUpdateChannelProcedure,
		svc.UpdateChannel,
		opts...,
	))
	mux.Handle(ChannelServiceArchiveChannelProcedure, connect_go.NewUnaryHandler(
		ChannelServiceArchiveChannelProcedure,
		svc.ArchiveChannel,
		opts...,
	))
	mux.Handle(ChannelServiceDeleteChannelProcedure, connect_go.NewUnaryHandler(
		ChannelServiceDeleteChannelProcedure,
		svc.DeleteChannel,
		opts...,
	))
	mux.Handle(ChannelServiceListUsersProcedure, connect_go.NewUnaryHandler(
		ChannelServiceListUsersProcedure,
		svc.ListUsers,
		opts...,
	))
	mux.Handle(ChannelServiceGetUserRoleProcedure, connect_go.NewUnaryHandler(
		ChannelServiceGetUserRoleProcedure,
		svc.GetUserRole,
		opts...,
	))
	mux.Handle(ChannelServiceListRoleUsersProcedure, connect_go.NewUnaryHandler(
		ChannelServiceListRoleUsersProcedure,
		svc.ListRoleUsers,
		opts...,
	))
	return "/taniko.rin.channel.v1.ChannelService/", mux
}

// UnimplementedChannelServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedChannelServiceHandler struct{}

func (UnimplementedChannelServiceHandler) CreateChannel(context.Context, *connect_go.Request[v1.CreateChannelRequest]) (*connect_go.Response[v1.CreateChannelResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("taniko.rin.channel.v1.ChannelService.CreateChannel is not implemented"))
}

func (UnimplementedChannelServiceHandler) UpdateChannel(context.Context, *connect_go.Request[v1.UpdateChannelRequest]) (*connect_go.Response[v1.UpdateChannelResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("taniko.rin.channel.v1.ChannelService.UpdateChannel is not implemented"))
}

func (UnimplementedChannelServiceHandler) ArchiveChannel(context.Context, *connect_go.Request[v1.ArchiveChannelRequest]) (*connect_go.Response[v1.ArchiveChannelResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("taniko.rin.channel.v1.ChannelService.ArchiveChannel is not implemented"))
}

func (UnimplementedChannelServiceHandler) DeleteChannel(context.Context, *connect_go.Request[v1.DeleteChannelRequest]) (*connect_go.Response[v1.DeleteChannelResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("taniko.rin.channel.v1.ChannelService.DeleteChannel is not implemented"))
}

func (UnimplementedChannelServiceHandler) ListUsers(context.Context, *connect_go.Request[v1.ListUsersRequest]) (*connect_go.Response[v1.ListUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("taniko.rin.channel.v1.ChannelService.ListUsers is not implemented"))
}

func (UnimplementedChannelServiceHandler) GetUserRole(context.Context, *connect_go.Request[v1.GetUserRoleRequest]) (*connect_go.Response[v1.GetUserRoleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("taniko.rin.channel.v1.ChannelService.GetUserRole is not implemented"))
}

func (UnimplementedChannelServiceHandler) ListRoleUsers(context.Context, *connect_go.Request[v1.ListRoleUsersRequest]) (*connect_go.Response[v1.ListRoleUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("taniko.rin.channel.v1.ChannelService.ListRoleUsers is not implemented"))
}
