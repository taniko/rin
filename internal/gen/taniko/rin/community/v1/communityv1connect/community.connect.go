// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: taniko/rin/community/v1/community.proto

package communityv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/taniko/rin/internal/gen/taniko/rin/community/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// CommunityServiceName is the fully-qualified name of the CommunityService service.
	CommunityServiceName = "taniko.rin.community.v1.CommunityService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CommunityServiceCreateCommunityProcedure is the fully-qualified name of the CommunityService's
	// CreateCommunity RPC.
	CommunityServiceCreateCommunityProcedure = "/taniko.rin.community.v1.CommunityService/CreateCommunity"
	// CommunityServiceJoinProcedure is the fully-qualified name of the CommunityService's Join RPC.
	CommunityServiceJoinProcedure = "/taniko.rin.community.v1.CommunityService/Join"
	// CommunityServiceCreateInviteTokenProcedure is the fully-qualified name of the CommunityService's
	// CreateInviteToken RPC.
	CommunityServiceCreateInviteTokenProcedure = "/taniko.rin.community.v1.CommunityService/CreateInviteToken"
	// CommunityServiceGetUserProcedure is the fully-qualified name of the CommunityService's GetUser
	// RPC.
	CommunityServiceGetUserProcedure = "/taniko.rin.community.v1.CommunityService/GetUser"
	// CommunityServiceChangeUserRoleProcedure is the fully-qualified name of the CommunityService's
	// ChangeUserRole RPC.
	CommunityServiceChangeUserRoleProcedure = "/taniko.rin.community.v1.CommunityService/ChangeUserRole"
	// CommunityServiceListUsersProcedure is the fully-qualified name of the CommunityService's
	// ListUsers RPC.
	CommunityServiceListUsersProcedure = "/taniko.rin.community.v1.CommunityService/ListUsers"
	// CommunityServiceListJoinCommunitiesProcedure is the fully-qualified name of the
	// CommunityService's ListJoinCommunities RPC.
	CommunityServiceListJoinCommunitiesProcedure = "/taniko.rin.community.v1.CommunityService/ListJoinCommunities"
)

// CommunityServiceClient is a client for the taniko.rin.community.v1.CommunityService service.
type CommunityServiceClient interface {
	CreateCommunity(context.Context, *connect_go.Request[v1.CreateCommunityRequest]) (*connect_go.Response[v1.CreateCommunityResponse], error)
	Join(context.Context, *connect_go.Request[v1.JoinRequest]) (*connect_go.Response[v1.JoinResponse], error)
	CreateInviteToken(context.Context, *connect_go.Request[v1.CreateInviteTokenRequest]) (*connect_go.Response[v1.CreateInviteTokenResponse], error)
	GetUser(context.Context, *connect_go.Request[v1.GetUserRequest]) (*connect_go.Response[v1.GetUserResponse], error)
	ChangeUserRole(context.Context, *connect_go.Request[v1.ChangeUserRoleRequest]) (*connect_go.Response[v1.ChangeUserRoleResponse], error)
	ListUsers(context.Context, *connect_go.Request[v1.ListUsersRequest]) (*connect_go.Response[v1.ListUsersResponse], error)
	ListJoinCommunities(context.Context, *connect_go.Request[v1.ListJoinCommunitiesRequest]) (*connect_go.Response[v1.ListJoinCommunitiesResponse], error)
}

// NewCommunityServiceClient constructs a client for the taniko.rin.community.v1.CommunityService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCommunityServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) CommunityServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &communityServiceClient{
		createCommunity: connect_go.NewClient[v1.CreateCommunityRequest, v1.CreateCommunityResponse](
			httpClient,
			baseURL+CommunityServiceCreateCommunityProcedure,
			opts...,
		),
		join: connect_go.NewClient[v1.JoinRequest, v1.JoinResponse](
			httpClient,
			baseURL+CommunityServiceJoinProcedure,
			opts...,
		),
		createInviteToken: connect_go.NewClient[v1.CreateInviteTokenRequest, v1.CreateInviteTokenResponse](
			httpClient,
			baseURL+CommunityServiceCreateInviteTokenProcedure,
			opts...,
		),
		getUser: connect_go.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+CommunityServiceGetUserProcedure,
			opts...,
		),
		changeUserRole: connect_go.NewClient[v1.ChangeUserRoleRequest, v1.ChangeUserRoleResponse](
			httpClient,
			baseURL+CommunityServiceChangeUserRoleProcedure,
			opts...,
		),
		listUsers: connect_go.NewClient[v1.ListUsersRequest, v1.ListUsersResponse](
			httpClient,
			baseURL+CommunityServiceListUsersProcedure,
			opts...,
		),
		listJoinCommunities: connect_go.NewClient[v1.ListJoinCommunitiesRequest, v1.ListJoinCommunitiesResponse](
			httpClient,
			baseURL+CommunityServiceListJoinCommunitiesProcedure,
			opts...,
		),
	}
}

// communityServiceClient implements CommunityServiceClient.
type communityServiceClient struct {
	createCommunity     *connect_go.Client[v1.CreateCommunityRequest, v1.CreateCommunityResponse]
	join                *connect_go.Client[v1.JoinRequest, v1.JoinResponse]
	createInviteToken   *connect_go.Client[v1.CreateInviteTokenRequest, v1.CreateInviteTokenResponse]
	getUser             *connect_go.Client[v1.GetUserRequest, v1.GetUserResponse]
	changeUserRole      *connect_go.Client[v1.ChangeUserRoleRequest, v1.ChangeUserRoleResponse]
	listUsers           *connect_go.Client[v1.ListUsersRequest, v1.ListUsersResponse]
	listJoinCommunities *connect_go.Client[v1.ListJoinCommunitiesRequest, v1.ListJoinCommunitiesResponse]
}

// CreateCommunity calls taniko.rin.community.v1.CommunityService.CreateCommunity.
func (c *communityServiceClient) CreateCommunity(ctx context.Context, req *connect_go.Request[v1.CreateCommunityRequest]) (*connect_go.Response[v1.CreateCommunityResponse], error) {
	return c.createCommunity.CallUnary(ctx, req)
}

// Join calls taniko.rin.community.v1.CommunityService.Join.
func (c *communityServiceClient) Join(ctx context.Context, req *connect_go.Request[v1.JoinRequest]) (*connect_go.Response[v1.JoinResponse], error) {
	return c.join.CallUnary(ctx, req)
}

// CreateInviteToken calls taniko.rin.community.v1.CommunityService.CreateInviteToken.
func (c *communityServiceClient) CreateInviteToken(ctx context.Context, req *connect_go.Request[v1.CreateInviteTokenRequest]) (*connect_go.Response[v1.CreateInviteTokenResponse], error) {
	return c.createInviteToken.CallUnary(ctx, req)
}

// GetUser calls taniko.rin.community.v1.CommunityService.GetUser.
func (c *communityServiceClient) GetUser(ctx context.Context, req *connect_go.Request[v1.GetUserRequest]) (*connect_go.Response[v1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// ChangeUserRole calls taniko.rin.community.v1.CommunityService.ChangeUserRole.
func (c *communityServiceClient) ChangeUserRole(ctx context.Context, req *connect_go.Request[v1.ChangeUserRoleRequest]) (*connect_go.Response[v1.ChangeUserRoleResponse], error) {
	return c.changeUserRole.CallUnary(ctx, req)
}

// ListUsers calls taniko.rin.community.v1.CommunityService.ListUsers.
func (c *communityServiceClient) ListUsers(ctx context.Context, req *connect_go.Request[v1.ListUsersRequest]) (*connect_go.Response[v1.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// ListJoinCommunities calls taniko.rin.community.v1.CommunityService.ListJoinCommunities.
func (c *communityServiceClient) ListJoinCommunities(ctx context.Context, req *connect_go.Request[v1.ListJoinCommunitiesRequest]) (*connect_go.Response[v1.ListJoinCommunitiesResponse], error) {
	return c.listJoinCommunities.CallUnary(ctx, req)
}

// CommunityServiceHandler is an implementation of the taniko.rin.community.v1.CommunityService
// service.
type CommunityServiceHandler interface {
	CreateCommunity(context.Context, *connect_go.Request[v1.CreateCommunityRequest]) (*connect_go.Response[v1.CreateCommunityResponse], error)
	Join(context.Context, *connect_go.Request[v1.JoinRequest]) (*connect_go.Response[v1.JoinResponse], error)
	CreateInviteToken(context.Context, *connect_go.Request[v1.CreateInviteTokenRequest]) (*connect_go.Response[v1.CreateInviteTokenResponse], error)
	GetUser(context.Context, *connect_go.Request[v1.GetUserRequest]) (*connect_go.Response[v1.GetUserResponse], error)
	ChangeUserRole(context.Context, *connect_go.Request[v1.ChangeUserRoleRequest]) (*connect_go.Response[v1.ChangeUserRoleResponse], error)
	ListUsers(context.Context, *connect_go.Request[v1.ListUsersRequest]) (*connect_go.Response[v1.ListUsersResponse], error)
	ListJoinCommunities(context.Context, *connect_go.Request[v1.ListJoinCommunitiesRequest]) (*connect_go.Response[v1.ListJoinCommunitiesResponse], error)
}

// NewCommunityServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCommunityServiceHandler(svc CommunityServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(CommunityServiceCreateCommunityProcedure, connect_go.NewUnaryHandler(
		CommunityServiceCreateCommunityProcedure,
		svc.CreateCommunity,
		opts...,
	))
	mux.Handle(CommunityServiceJoinProcedure, connect_go.NewUnaryHandler(
		CommunityServiceJoinProcedure,
		svc.Join,
		opts...,
	))
	mux.Handle(CommunityServiceCreateInviteTokenProcedure, connect_go.NewUnaryHandler(
		CommunityServiceCreateInviteTokenProcedure,
		svc.CreateInviteToken,
		opts...,
	))
	mux.Handle(CommunityServiceGetUserProcedure, connect_go.NewUnaryHandler(
		CommunityServiceGetUserProcedure,
		svc.GetUser,
		opts...,
	))
	mux.Handle(CommunityServiceChangeUserRoleProcedure, connect_go.NewUnaryHandler(
		CommunityServiceChangeUserRoleProcedure,
		svc.ChangeUserRole,
		opts...,
	))
	mux.Handle(CommunityServiceListUsersProcedure, connect_go.NewUnaryHandler(
		CommunityServiceListUsersProcedure,
		svc.ListUsers,
		opts...,
	))
	mux.Handle(CommunityServiceListJoinCommunitiesProcedure, connect_go.NewUnaryHandler(
		CommunityServiceListJoinCommunitiesProcedure,
		svc.ListJoinCommunities,
		opts...,
	))
	return "/taniko.rin.community.v1.CommunityService/", mux
}

// UnimplementedCommunityServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCommunityServiceHandler struct{}

func (UnimplementedCommunityServiceHandler) CreateCommunity(context.Context, *connect_go.Request[v1.CreateCommunityRequest]) (*connect_go.Response[v1.CreateCommunityResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("taniko.rin.community.v1.CommunityService.CreateCommunity is not implemented"))
}

func (UnimplementedCommunityServiceHandler) Join(context.Context, *connect_go.Request[v1.JoinRequest]) (*connect_go.Response[v1.JoinResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("taniko.rin.community.v1.CommunityService.Join is not implemented"))
}

func (UnimplementedCommunityServiceHandler) CreateInviteToken(context.Context, *connect_go.Request[v1.CreateInviteTokenRequest]) (*connect_go.Response[v1.CreateInviteTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("taniko.rin.community.v1.CommunityService.CreateInviteToken is not implemented"))
}

func (UnimplementedCommunityServiceHandler) GetUser(context.Context, *connect_go.Request[v1.GetUserRequest]) (*connect_go.Response[v1.GetUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("taniko.rin.community.v1.CommunityService.GetUser is not implemented"))
}

func (UnimplementedCommunityServiceHandler) ChangeUserRole(context.Context, *connect_go.Request[v1.ChangeUserRoleRequest]) (*connect_go.Response[v1.ChangeUserRoleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("taniko.rin.community.v1.CommunityService.ChangeUserRole is not implemented"))
}

func (UnimplementedCommunityServiceHandler) ListUsers(context.Context, *connect_go.Request[v1.ListUsersRequest]) (*connect_go.Response[v1.ListUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("taniko.rin.community.v1.CommunityService.ListUsers is not implemented"))
}

func (UnimplementedCommunityServiceHandler) ListJoinCommunities(context.Context, *connect_go.Request[v1.ListJoinCommunitiesRequest]) (*connect_go.Response[v1.ListJoinCommunitiesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("taniko.rin.community.v1.CommunityService.ListJoinCommunities is not implemented"))
}
